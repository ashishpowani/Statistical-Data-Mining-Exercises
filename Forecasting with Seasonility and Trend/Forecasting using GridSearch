library(forecast)
library(TTR)
library(NMOF) # Used for GridSearch

iPhone <- read.csv(file.choose(), header = TRUE, sep = ",")
iPhone

View(iPhone)

newiPhone <- subset(iPhone, Year !=2007)
newiPhone

#Create a Time Series structure
iPhone_timeSeries <- ts(newiPhone$Sales, start = 2008, frequency = 4)
iPhone_timeSeries

# Trying out different values for the smoothing parameters (alpha, beta and gamma) manually
# Use values between 0.1 - 0.4 to avoid overfitting

#Weighing only the most recent data (alpha parameter)
hw <- HoltWinters(iPhone_timeSeries, alpha = 0.4, beta = FALSE, gamma = FALSE)
plot(hw)
lines(hw$fitted[,2], col="blue")

# Weighing alpha and beta (recent data and trend)
hw2 <- HoltWinters(iPhone_timeSeries, alpha = 0.3, beta = 0.4, gamma = FALSE)
lines(hw2$fitted[,2], col='orange')

# Weighing all 3 parameters (recent data, trend and seasonility)
hw3 <- HoltWinters(iPhone_timeSeries, alpha = 0.1, beta = 0.4, gamma = 0.4)
lines(hw3$fitted[,2], col='green')

# Choose the best parameter values for the best fit using Grid search

#This is how the gridSearch works via the help file
  #testFun <- function(x) x[1L] + x[2L]^2
  #sol <- gridSearch(fun = testFun, levels = list(1:2, c(2, 3, 5)))
  #sol$minfun
  #sol$minlevels

test2fun <- function(x) HoltWinters(iPhone_timeSeries, x[1L], x[2L], x[3L])$SSE
#SSE(Error term) is the one of the outputs of holtWinters. We use this to determine the best fit or to minimize the error

sol2 <- gridSearch(fun=test2fun, levels = list(
  c(0.05,0.10,0.15,0.20,0.25,0.30,0.35,0.40),
  c(0.05,0.10,0.15,0.20,0.25,0.30,0.35,0.40),
  c(0.05,0.10,0.15,0.20,0.25,0.30,0.35,0.40))
)

# Displays the minimum SSE for all the levels
sol2$minfun

# Displays the levels that gives the minimum (SSE in this case)
sol2$minlevels

# Plot the best fit with the levels that gives the min SSE
hw4 <- HoltWinters(iPhone_timeSeries, alpha = 0.25, beta = 0.1, gamma = 0.4)
lines(hw4$fitted[,2], col='red')




